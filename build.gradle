import com.eriwen.gradle.css.tasks.MinifyCssTask
import com.eriwen.gradle.js.tasks.MinifyJsTask
import com.github.spotbugs.SpotBugsTask

if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

println "Building for environment: $env"

ext {
    webInf = file('/WEB-INF')
    freemarker = file("$webInf/freemarker")
    lib = file("$webInf/lib")
    javaClasses = file("$webInf/classes")
    cert = file("$javaClasses/cert")
    conf = file("$javaClasses/conf")
    dkim = file("$javaClasses/dkim")
    xslfo = file("$javaClasses/xslfo")
    elastic_mapping = file("$javaClasses/elastic_mapping")
    geo_db = file("$javaClasses/geo_db")
    images = file("$javaClasses/images")

    warDir = file("$buildDir/explodedWar/$env")
    warWebInfDir = file("$warDir$webInf")
    warLibDir = file("$warDir$lib")
    warClassesDir = file("$warDir$javaClasses")
    warCertDir = file("$warDir$cert")
    warConfDir = file("$warDir$conf")
    warDkimDir = file("$warDir$dkim")
    warXslfoDir = file("$warDir$xslfo")
    warMappingDir = file("$warDir$elastic_mapping")
    warGeoDBDir = file("$warDir$geo_db")
    warWebInfClassesImagesDir = file("$warDir$images")

    activeProfilewarDir = file("$buildDir/activeProfile/$env")
    activeProfilewarWebInfDir = file("$activeProfilewarDir$webInf")
    activeProfilewarClassesDir = file("$activeProfilewarDir$javaClasses")
    activeProfilewarConfDir = file("$activeProfilewarDir$conf")
    activeProfilewarFreemarkerDir = file("$activeProfilewarDir$freemarker")
    activeProfilewarXslfoDir = file("$activeProfilewarDir$xslfo")

    unzipDir = file("${buildDir}/unpacked/dist")
    unzipLibDir = file("$unzipDir$lib")

    passFileLocal = file('view/resources/conf/pass.properties')
    passFileTest = file(passwordTestFileLocation)
    passFileProd = file(passwordProdFileLocation)

    firebaseFileLocal = file('view/resources/conf/noq-app-inc-firebase-adminsdk.json')
    firebaseFileTest = file(firebaseAdminTestFileLocation)
    firebaseFileProd = file(firebaseAdminProdFileLocation)
    
    dkimCertLocal = file('view/resources/dkim/dkim.der')
    dkimCertTest = file(dkimCertificateTestFileLocation)
    dkimCertProd = file(dkimCertificateProdFileLocation)

    geoDBLocal = file('view/resources/geo_db/GeoLite2-City.mmdb')
    geoDBTest = file(geoDBTestFileLocation)
    geoDBProd = file(geoDBProdFileLocation)

    baseName = "noqapp"
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.eriwen:gradle-js-plugin:2.14.1"
        classpath "com.eriwen:gradle-css-plugin:2.14.0"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatform"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.5"
    }
}

apply plugin: 'maven-publish'
apply plugin: 'com.eriwen.gradle.js'
apply plugin: 'css'
apply plugin: 'com.github.spotbugs'

allprojects {
    group = 'com.noqapp'
    apply from: "$rootDir/versioning.gradle"
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    apply plugin: 'checkstyle'  //for java code conventions, you can use sonar instead but it need DB
    apply plugin: 'pmd'
    apply plugin: 'jacoco'      //for code coverage
    apply plugin: 'org.junit.platform.gradle.plugin'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        // Detecting annotation processors on the compile classpath is deprecated and Gradle 5.0 will ignore them.
        options.compilerArgs += ["-proc:none"]
    }

    sourceSets {
        test {
            resources.srcDirs = ['src/test/resources']
            java.srcDirs = ['src/test/java']
        }
    }

    checkstyle {
        ignoreFailures = true
    }

    spotbugs {
        toolVersion = '3.1.9'
    }

    pmd {
        ignoreFailures = true
        toolVersion = '6.9.0'

        ruleSets = [
                "java-basic",
                "java-braces",
                "java-naming",
                "java-android",
                "java-clone",
                "java-codesize",
                "java-controversial",
                "java-design",
                "java-finalizers",
                "java-imports",
                "java-j2ee",
                "java-javabeans",
                "java-junit",
                "java-migrating",
                "java-optimizations",
                "java-strictexception",
                "java-strings",
                "java-sunsecure",
                "java-typeresolution",
                "java-unusedcode"
        ]
    }

    jar {
        manifest {
            attributes(
                    'Implementation-Vendor': 'NoQueue Inc',
                    'Implementation-Title': rootProject.name,
                    'Implementation-Version': allprojects.version + " $env",
                    'Build-Time': "${new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")}",
                    'Copyright': '2016-2019, NoQueue Inc'
            )
        }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    jacoco {
        toolVersion = "0.8.2"
        applyTo junitPlatformTest
    }

    junitPlatformTest {
        jacoco {
            destinationFile = file("${buildDir}/jacoco/test.exec")
        }
    }

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-milestone" }
        maven { url "http://repo1.maven.org/maven2/" }
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }

    dependencies {
        implementation files('../lib/user-agent-detector.jar')

        implementation 'org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:1.0.1'
        implementation 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

        implementation "$springGroup:spring-aop:$springVersion"
        implementation "$springGroup:spring-aspects:$springVersion"
        implementation "$springGroup:spring-beans:$springVersion"
        implementation "$springGroup:spring-context:$springVersion"
        implementation "$springGroup:spring-context-support:$springVersion"
        implementation "$springGroup:spring-core:$springVersion"
        implementation "$springGroup:spring-expression:$springVersion"
        implementation "$springGroup:spring-instrument:$springVersion"
        implementation "$springGroup:spring-jms:$springVersion"
        implementation "$springGroup:spring-oxm:$springVersion"
        implementation "$springGroup:spring-test:$springVersion"
        implementation "$springGroup:spring-tx:$springVersion"
        implementation "$springGroup:spring-web:$springVersion"
        implementation "$springGroup:spring-webmvc:$springVersion"

        implementation "$springSecurityGroup:spring-security-aspects:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-config:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-core:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-crypto:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-taglibs:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-web:$springSecurityVersion"

        implementation "$springDataGroup:spring-data-mongodb:$springDataMongo"
        implementation "$springDataGroup:spring-data-commons:$springDataCommon"
        implementation "org.mongodb:mongo-java-driver:$mongoJavaDriver"

        implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elastic"
        /* For elastic. */
        implementation "org.apache.logging.log4j:log4j-to-slf4j:$log4jToSlf4j"

        implementation "$springDataGroup:spring-data-redis:$redis"
        implementation "redis.clients:jedis:$jedis"
        implementation "org.quartz-scheduler:quartz:$quartz"

        /** --- Specific to NoQueue Web Application ---- */
        implementation "com.amazonaws:aws-java-sdk-s3:$amazonaws"
        implementation "org.springframework.webflow:spring-webflow:$webflow"
        implementation "net.markenwerk:utils-mail-dkim:$dkim"
        /** ------- */

        implementation "com.squareup.okhttp3:okhttp:$okhttp"
        implementation "com.google.zxing:core:$zxing"
        implementation "aopalliance:aopalliance:1.0"
        implementation "org.apache.commons:commons-vfs2:$vfs2"
        implementation "org.apache.commons:commons-csv:$csv"
        implementation "com.jcraft:jsch:$jsch"

        implementation "org.aspectj:aspectjrt:$aspectjrt"
        implementation "org.slf4j:slf4j-api:$slf4japi"
        implementation "org.jboss.logging:jboss-logging:$jbosslogging"
        implementation "mysql:mysql-connector-java:$mysqlConnector"
        implementation "com.zaxxer:HikariCP:$hikariCP"
        implementation "joda-time:joda-time:$joda"
        implementation "org.freemarker:freemarker:$freemarker"
        implementation "org.apache.xmlgraphics:fop:$fop"

        implementation "com.google.guava:guava:$guava"
        implementation "com.google.code.gson:gson:$gson"
        implementation "com.google.maps:google-maps-services:$googleMapsServices"
        implementation "com.googlecode.libphonenumber:libphonenumber:$libphonenumber"
        implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:r239"
        implementation ("com.google.firebase:firebase-admin:$firebase") {
            exclude group: 'com.google.guava'
        }

        implementation "com.fasterxml:classmate:$classmate"
        implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson"
        implementation "com.fasterxml.jackson.core:jackson-core:$jackson"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jackson"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson"

        implementation "org.json:json:$json"
        implementation "com.maxmind.geoip2:geoip2:$geoip2"

        implementation "commons-fileupload:commons-fileupload:$commonsfileupload"
        implementation "commons-io:commons-io:$commonsio"
        implementation "commons-validator:commons-validator:$commonsvalidator"
        implementation "commons-codec:commons-codec:1.11"
        implementation "commons-logging:commons-logging:1.2"

        implementation "javax.mail:javax.mail-api:$javaxMail"
        implementation "javax.validation:validation-api:$javaxValidation"
        implementation "javax.inject:javax.inject:1"

        implementation "org.apache.commons:commons-lang3:$commonslang3"
        implementation "org.apache.commons:commons-text:$commonsText"
        implementation "org.apache.poi:poi:$poi"
        implementation "org.apache.tika:tika-parsers:$tika"
        implementation "org.apache.tika:tika-core:$tika"
        implementation "org.apache.commons:commons-collections4:4.2"

        implementation "ch.qos.logback:logback-core:$logback"
        implementation "ch.qos.logback:logback-classic:$logback"
        implementation "net.logstash.logback:logstash-logback-encoder:$logstashlogbackencoder"
        implementation "net.bull.javamelody:javamelody-core:$javamelody"
        /** Because using org.junit.Assert in code. */
        implementation "org.junit.jupiter:junit-jupiter-engine:$junit5"
        implementation "org.hamcrest:hamcrest-all:1.3"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5"
        testImplementation "org.mockito:mockito-core:$mockito"
        testImplementation "org.mockito:mockito-inline:$mockito"
        testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$flapdoodle"
        testImplementation "org.springframework:spring-test:$springVersion"
        testImplementation "org.awaitility:awaitility:$awaitility"
        testImplementation "org.elasticsearch.test:framework:$elastic"

        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit5"
        testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatform"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5"
    }

    test {
        systemProperty "spring.profiles.active", "$env"

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: $descriptor")
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: $descriptor produced standard out/err: $event.message")
        }

        filter {
            //specific test class, wildcard for packages
            includeTestsMatching "*.*Test"
        }

        testLogging {
            // false when hiding system.out logs
            showStandardStreams = false

            // set options for log level LIFECYCLE
            events "failed"
            exceptionFormat "short"

            // set options for log level DEBUG
            debug {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }

            // remove standard output/error logging from --info builds
            // by assigning only 'failed' and 'skipped' events
            info.events = ["failed", "skipped"]

            // Disable the test report for the individual test task
            reports.html.enabled = false
        }
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }
}

project(':common') {
    jar.baseName = baseName + '-common'
}

project(':loader') {
    apply plugin: 'war'
    jar.baseName = baseName + '-loader'

    dependencies {
        compile project(':medical')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
    }
}

project(':domain') {
    jar.baseName = baseName + '-domain'

    dependencies {
        compile project(':common')
    }
}

project(':health') {
    jar.baseName = baseName + '-health'

    dependencies {
        compile project(':common'),
                project(':domain')
    }
}

project(':security') {
    apply plugin: 'war'
    jar.baseName = baseName + '-security'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'),
                project(':domain')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

project(':service') {
    jar.baseName = baseName + '-service'

    dependencies {
        compile project(':common'),
                project(':domain'),
                project(':health')
    }
}

project(':search') {
    jar.baseName = baseName + '-search'

    dependencies {
        compile project(':common'),
                project(':domain'),
                project(':health')
    }
}

project(':social') {
    jar.baseName = baseName + '-social'

    dependencies {
        compile project(':common'),
                project(':domain'),
                project(':service')
    }
}

project(':medical') {
    jar.baseName = baseName + '-medical'

    dependencies {
        compile project(':common'),
                project(':domain'),
                project(':health'),
                project(':service')
    }
}

project(':view') {
    apply plugin: 'war'
    jar.baseName = baseName + '-view'
    war.baseName = baseName + '-view'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'),
                project(':domain'),
                project(':health'),
                project(':security'),
                project(':medical'),
                project(':social'),
                project(':service'),
                project(':search'),
                project(':loader')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

task copyJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'health/build/libs'
    from 'security/build/libs'
    from 'medical/build/libs'
    from 'service/build/libs'
    from 'search/build/libs'
    from 'social/build/libs'
    from 'view/build/libs'
    into warLibDir
    include '**/*.jar'
}

task unzip(type: Copy, dependsOn: [':view:war']) {
    def zipFile = file("view/build/libs/$baseName" + '-view-' + version + '.war')

    from zipTree(zipFile)
    into unzipDir
}

task setUpProfileForJunit() {
    doLast {
        delete buildDir
        activeProfilewarClassesDir.mkdirs()
        activeProfilewarConfDir.mkdirs()
        activeProfilewarFreemarkerDir.mkdirs()
        activeProfilewarXslfoDir.mkdirs()

        copy {
            from file("view/environment/$env/$env" + ".properties")
            into activeProfilewarConfDir
        }

        copy {
            from 'view/resources/conf/application-messages.properties'
            from 'view/resources/conf/config.properties'
            from 'view/resources/conf/redis.properties'
            from 'view/resources/conf/300x300_overlay_code_qr.png'

            if (env == 'prod') {
                if (passFileProd.exists()) {
                    from passwordProdFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileProd.canonicalPath")
                }

                if (firebaseFileProd.exists()) {
                    from firebaseAdminProdFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (passFileTest.exists()) {
                    from passwordTestFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileTest.canonicalPath")
                }

                if (firebaseFileTest.exists()) {
                    from firebaseAdminTestFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local pass file $passFileLocal.canonicalPath"
                if (passFileLocal.exists()) {
                    from 'view/resources/conf/pass.properties'
                } else {
                    throw new Exception("Required pass file does not exists: $passFileLocal.canonicalPath")
                }

                println "Development environment, getting local firebase file $firebaseFileLocal.canonicalPath"
                if (firebaseFileLocal.exists()) {
                    from 'view/resources/conf/noq-app-inc-firebase-adminsdk.json'
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileLocal.canonicalPath")
                }
            }

            into activeProfilewarConfDir
        }

        copy {
            from "view/environment/$env/logback.xml"
            from 'view/resources/conf/messages.properties'
            into activeProfilewarClassesDir
        }

        copy {
            from "view/environment/$env/noqapp-servlet.xml"
            into activeProfilewarWebInfDir
        }

        copy {
            from "view/environment/$env/mongo-config.xml"
            into activeProfilewarWebInfDir
        }

        copy {
            from "view/web$freemarker"
            into activeProfilewarFreemarkerDir
        }

        copy {
            from "view/resources/xslfo"
            into activeProfilewarXslfoDir
        }
    }
}

css.source {
    custom {
        css {
            srcDir "view/web/static/css"
            include "*.css"
            exclude "*.min.css"
        }
    }
}

javascript.source {
    custom {
        js {
            srcDir "view/web/static/js"
            include "colpick.js", "mainpop.js"
            exclude "*.min.js"
        }
    }
}

css.source.custom.css.files.eachWithIndex { cssFile, idx ->
    tasks.create(name: "dominifyCss${idx}", type: MinifyCssTask) {
        if (cssFile.getParentFile().getName() != "css") {
            source = cssFile
            dest = "${buildDir}/tmp/css/${cssFile.getParentFile().getName()}/${cssFile.name}"
            closure {
                compilationLevel = 'SIMPLE_OPTIMIZATIONS'
            }
        } else {
            source = cssFile
            dest = "${buildDir}/tmp/css/${cssFile.name}"
            closure {
                compilationLevel = 'SIMPLE_OPTIMIZATIONS'
            }
        }
        println("CSS files minifying: $cssFile")
    }
}

javascript.source.custom.js.files.eachWithIndex { jsFile, idx ->
    tasks.create(name: "dominifyJs${idx}", type: MinifyJsTask) {
        if (jsFile.getParentFile().getName() != "js") {
            source = jsFile
            dest = "${buildDir}/tmp/js/${jsFile.getParentFile().getName()}/${jsFile.name}"
            closure {
                compilationLevel = 'SIMPLE_OPTIMIZATIONS'
            }
        } else {
            source = jsFile
            dest = "${buildDir}/tmp/js/${jsFile.name}"
            closure {
                compilationLevel = 'SIMPLE_OPTIMIZATIONS'
            }
        }
        println("JS files minifying: $jsFile")
    }
}

task individualCssMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyCss") })
task individualJsMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyJs") })
task createBuildInfoFile {
    doLast {
        buildDir.mkdirs()
        def buildInfoFile = new File("$buildDir/build-info.properties")
        Properties props = new Properties()
        props.setProperty('owner', 'NoQueue Inc')
        props.setProperty('copyright', 'All rights reserved')
        props.setProperty('build.version', project.version.toString())
        props.setProperty('build.env', "$env")

        props.store(buildInfoFile.newWriter(), null)
    }
}

task prepWar(dependsOn: [
        createBuildInfoFile,
        unzip,
        copyJars,
        individualCssMinify,
        individualJsMinify
]) {
    doLast {
        warClassesDir.mkdirs()
        warConfDir.mkdirs()
        warDkimDir.mkdirs()
        warMappingDir.mkdirs()
        warGeoDBDir.mkdirs()
        warXslfoDir.mkdirs()

        copy {
            from 'view/web'
            into warDir
            exclude '**/*.classes'
            exclude '**/static/css/*.css'
            exclude 'view/web/static/js/mainpop.js', 'view/web/static/js/colpick.js'
        }

        copy {
            from("${buildDir}/tmp/css") {
                include "**/*.css"
            }
            into "${warDir}/static/css"
        }

        copy {
            from("${buildDir}/tmp/js") {
                include "**/*.js"
            }
            into "${warDir}/static/js"
        }

        copy {
            from file("view/environment/$env/$env" + ".properties")
            into warConfDir
        }

        copy {
            from 'view/resources/xslfo'
            into warXslfoDir
        }

        copy {
            from 'view/resources/conf/application-messages.properties'
            from 'view/resources/conf/config.properties'
            from 'view/resources/conf/redis.properties'
            from 'view/resources/conf/300x300_overlay_code_qr.png'

            if (env == 'prod') {
                if (passFileProd.exists()) {
                    from passwordProdFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileProd.canonicalPath")
                }

                if (firebaseFileProd.exists()) {
                    from firebaseAdminProdFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (passFileTest.exists()) {
                    from passwordTestFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileTest.canonicalPath")
                }

                if (firebaseFileTest.exists()) {
                    from firebaseAdminTestFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local pass file $passFileLocal.canonicalPath"
                if (passFileLocal.exists()) {
                    from 'view/resources/conf/pass.properties'
                } else {
                    throw new Exception("Required pass file does not exists: $passFileLocal.canonicalPath")
                }

                println "Development environment, getting local firebase file $firebaseFileLocal.canonicalPath"
                if (firebaseFileLocal.exists()) {
                    from 'view/resources/conf/noq-app-inc-firebase-adminsdk.json'
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileLocal.canonicalPath")
                }
            }

            into warConfDir
        }

        copy {
            if (env == 'prod') {
                if (dkimCertProd.exists()) {
                    from dkimCertificateProdFileLocation
                } else {
                    throw new Exception("Required dkim file does not exists: $dkimCertProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (dkimCertTest.exists()) {
                    from dkimCertificateTestFileLocation
                } else {
                    throw new Exception("Required dkim file does not exists: $dkimCertTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local dkim file $dkimCertLocal.canonicalPath"
                if (dkimCertLocal.exists()) {
                    from dkimCertLocal
                } else {
                    throw new Exception("Required dkim file does not exists: $dkimCertLocal.canonicalPath")
                }
            }

            into warDkimDir
        }

        copy {
            if (env == 'prod') {
                if (geoDBProd.exists()) {
                    from geoDBProdFileLocation;
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (geoDBTest.exists()) {
                    from geoDBTestFileLocation;
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBTestFileLocation.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local GeoLite file $geoDBLocal.canonicalPath"
                if (geoDBLocal.exists()) {
                    from 'view/resources/geo_db/GeoLite2-City.mmdb'
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            into warGeoDBDir
        }

        copy {
            from("search/resources/elastic_mapping") {
                include "**/*.json"
            }
            into warMappingDir
        }

        copy {
            from "view/environment/$env/logback.xml"
            from 'view/resources/conf/messages.properties'
            into warClassesDir
        }

        copy {
            from "view/environment/$env/noqapp-servlet.xml"
            into warWebInfDir
        }

        copy {
            from "view/environment/$env/mongo-config.xml"
            into warWebInfDir
        }

        copy {
            from 'view/web/static/images'
            into warWebInfClassesImagesDir
        }

        copy {
            from 'view/web/static2/**'
            into "${warDir}/static2"
        }

        copy {
            from unzipLibDir
            into warLibDir
        }

        copy {
            from "${buildDir}/build-info.properties"
            into warClassesDir
        }
    }
}

//import org.apache.tools.ant.filters.ReplaceTokens
task war(type: War, dependsOn: prepWar) {
    doFirst {
        exclude('**/noqapp-loader-*.jar')
        if (env == 'sandbox' || env == 'prod') {
            baseName = "ROOT-$env." + project.version.toString()
        } else if (env == 'dev') {
            baseName = "ROOT-$env"
        } else {
            throw new Exception("Undefined env: $env")
        }

//        filter(ReplaceTokens, tokens: ['style': 'style-min.css'])
//        filter(ReplaceTokens, tokens: ['stylelogin': 'stylelogin-min.css'])
    }

    from warDir
    version ""
    destinationDir = file("$buildDir/war/$env")
}

task loaderWar(type: War, dependsOn: prepWar) {
    doFirst {
        if (env == 'sandbox' || env == 'prod') {
            baseName = "ROOT-loader-$env." + project.version.toString()
        } else if (env == 'dev') {
            baseName = "ROOT-loader-$env"
        } else {
            throw new Exception("Undefined env: $env")
        }

//        filter(ReplaceTokens, tokens: ['style': 'style-min.css'])
//        filter(ReplaceTokens, tokens: ['stylelogin': 'stylelogin-min.css'])
    }

    from warDir
    version ""
    destinationDir = file("$buildDir/war/$env-loader")
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    doLast {
        println "Test reports for all test complete $env"
    }
}

publishing {
    publications {
        common(MavenPublication) {
            artifactId 'common'
            artifact "common/build/libs/$baseName" + '-common-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQApp private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        domain(MavenPublication) {
            artifactId 'domain'
            artifact "domain/build/libs/$baseName" + '-domain-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQApp private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        health(MavenPublication) {
            artifactId 'health'
            artifact "health/build/libs/$baseName" + '-health-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQApp private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        medical(MavenPublication) {
            artifactId 'medical'
            artifact "medical/build/libs/$baseName" + '-medical-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        service(MavenPublication) {
            artifactId 'service'
            artifact "service/build/libs/$baseName" + '-service-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        search(MavenPublication) {
            artifactId 'search'
            artifact "search/build/libs/$baseName" + '-search-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        social(MavenPublication) {
            artifactId 'social'
            artifact "social/build/libs/$baseName" + '-social-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue Inc applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2019. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue Inc')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }
    }

    repositories {
        maven {
            url 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
        }
    }
}

//Line below is not required because defaultTasks order is followed
//testReport.mustRunAfter war
//publishToMavenLocal for local
defaultTasks 'clean', 'setUpProfileForJunit', 'build', 'jar', 'war', 'loaderWar', 'test', 'testReport', 'jacocoTestReport', 'publish'