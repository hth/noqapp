if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

println "Building for environment: $env"

ext {
    webInf = file('/WEB-INF')
    freemarker = file("$webInf/freemarker")
    lib = file("$webInf/lib")
    javaClasses = file("$webInf/classes")
    banner_images = file("$javaClasses/banner_images")
    cert = file("$javaClasses/cert")
    conf = file("$javaClasses/conf")
    dkim = file("$javaClasses/dkim")
    nlp = file("$javaClasses/nlp")
    xslfo = file("$javaClasses/xslfo")
    elastic_mapping = file("$javaClasses/elastic_mapping")
    geo_db = file("$javaClasses/geo_db")

    warDir = file("$buildDir/explodedWar/$env")
    warWebInfDir = file("$warDir$webInf")
    warLibDir = file("$warDir$lib")
    warClassesDir = file("$warDir$javaClasses")
    warBannerImageDir = file("$warDir$banner_images")
    warCertDir = file("$warDir$cert")
    warConfDir = file("$warDir$conf")
    warDkimDir = file("$warDir$dkim")
    warNLPDir = file("$warDir$nlp")
    warXslfoDir = file("$warDir$xslfo")
    warMappingDir = file("$warDir$elastic_mapping")
    warGeoDBDir = file("$warDir$geo_db")

    activeProfilewarDir = file("$buildDir/activeProfile/$env")
    activeProfilewarWebInfDir = file("$activeProfilewarDir$webInf")
    activeProfilewarClassesDir = file("$activeProfilewarDir$javaClasses")
    activeProfilewarConfDir = file("$activeProfilewarDir$conf")
    activeProfilewarFreemarkerDir = file("$activeProfilewarDir$freemarker")
    activeProfilewarXslfoDir = file("$activeProfilewarDir$xslfo")
    activeProfilewarGeoDBDir = file("$activeProfilewarDir$geo_db")

    unzipDir = file("${buildDir}/unpacked/dist")
    unzipLibDir = file("$unzipDir$lib")

    passFileLocal = file('view/resources/conf/pass.properties')
    passFileTest = file(passwordTestFileLocation)
    passFileProd = file(passwordProdFileLocation)

    firebaseFileLocal = file('view/resources/conf/noqueue-sandbox-firebase-adminsdk.json')
    firebaseFileTest = file(firebaseAdminTestFileLocation)
    firebaseFileProd = file(firebaseAdminProdFileLocation)

    dkimCertLocal = file('view/resources/dkim/dkim.der')
    dkimCertTest = file(dkimCertificateTestFileLocation)
    dkimCertProd = file(dkimCertificateProdFileLocation)

    geoDBLocal = file('view/resources/geo_db/GeoLite2-City.mmdb')
    geoDBTest = file(geoDBTestFileLocation)
    geoDBProd = file(geoDBProdFileLocation)

    archiveName = "noqapp"
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:$spotbugsPluginGradle"
        classpath 'org.owasp:dependency-check-gradle:5.3.2'
        //classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1'
        classpath "de.aaschmid:gradle-cpd-plugin:3.1"
        classpath 'org.codehaus.groovy:groovy-all:2.4.15'
    }
}

apply plugin: 'maven-publish'

allprojects {
    group = 'com.noqapp'
    apply from: "$rootDir/versioning.gradle"
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

//    apply plugin: 'checkstyle'  //for java code conventions, you can use sonar instead but it need DB
    apply plugin: 'pmd'
    apply plugin: 'jacoco'      //for code coverage
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'org.owasp.dependencycheck'
    //apply plugin: 'org.sonarqube'
    apply plugin: "de.aaschmid.cpd"

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        // Detecting annotation processors on the compile classpath is deprecated and Gradle 5.0 will ignore them.
        options.compilerArgs += ["-proc:none"]
    }

    sourceSets {
        test {
            resources.srcDirs = ['src/test/resources']
            java.srcDirs = ['src/test/java']
        }
    }

    jar {
        manifest {
            attributes(
                    'Implementation-Vendor': 'NoQueue',
                    'Implementation-Title': rootProject.name,
                    'Implementation-Version': allprojects.version + " $env",
                    'Build-Time': "${new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")}",
                    'Copyright': '2016-2021, NoQueue'
            )
        }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://repo1.maven.org/maven2/" }
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }

    dependencies {
        implementation files('../lib/user-agent-detector.jar')
        implementation files('../lib/stanford-parser.jar')

        implementation "$springGroup:spring-aop:$springVersion"
        implementation "$springGroup:spring-aspects:$springVersion"
        implementation "$springGroup:spring-beans:$springVersion"
        implementation "$springGroup:spring-context:$springVersion"
        implementation "$springGroup:spring-context-support:$springVersion"
        implementation "$springGroup:spring-core:$springVersion"
        implementation "$springGroup:spring-expression:$springVersion"
        implementation "$springGroup:spring-instrument:$springVersion"
        implementation "$springGroup:spring-jms:$springVersion"
        implementation "$springGroup:spring-oxm:$springVersion"
        implementation "$springGroup:spring-test:$springVersion"
        implementation "$springGroup:spring-tx:$springVersion"
        implementation "$springGroup:spring-web:$springVersion"
        implementation "$springGroup:spring-webmvc:$springVersion"

        implementation "$springSecurityGroup:spring-security-aspects:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-config:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-core:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-crypto:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-taglibs:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-web:$springSecurityVersion"

        implementation "$springDataGroup:spring-data-neo4j:$springDataNeo4j"
        implementation "$springDataGroup:spring-data-mongodb:$springDataMongo"
        implementation "$springDataGroup:spring-data-commons:$springDataCommon"
        implementation "org.mongodb:mongo-java-driver:$mongoJavaDriver"

        implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elastic"
        /* For elastic. */
        implementation "org.apache.logging.log4j:log4j-to-slf4j:$log4jToSlf4j"

        implementation "$springDataGroup:spring-data-redis:$redis"
        implementation "io.lettuce:lettuce-core:$lettuce"
        implementation "org.quartz-scheduler:quartz:$quartz"
        implementation "com.braintreepayments.gateway:braintree-java:$braintree"

        /** --- Specific to NoQueue Web Application ---- */
        implementation "io.grpc:grpc-all:$grpcAll"
        implementation "com.amazonaws:aws-java-sdk-s3:$amazonaws"
        implementation "org.springframework.webflow:spring-webflow:$webflow"
        implementation "net.markenwerk:utils-mail-dkim:$dkim"
        implementation "org.reflections:reflections:$reflections"
        /** ------- */

        implementation "com.github.ben-manes.caffeine:caffeine:$caffeine"
        implementation "com.squareup.okhttp3:okhttp:$okhttp"
        implementation "com.google.zxing:core:$zxing"
        implementation "aopalliance:aopalliance:1.0"
        implementation "com.jcraft:jsch:$jsch"
        /** Added this for validation. Keep 6.2.0.Final. */
        implementation "org.hibernate.validator:hibernate-validator:$hibernateValidator"

        implementation "org.aspectj:aspectjrt:$aspectjrt"
        implementation "org.slf4j:slf4j-api:$slf4japi"
        implementation "org.jboss.logging:jboss-logging:$jbosslogging"
        implementation "mysql:mysql-connector-java:$mysqlConnector"
        implementation "com.zaxxer:HikariCP:$hikariCP"
        implementation "joda-time:joda-time:$joda"
        implementation "org.freemarker:freemarker:$freemarker"
        implementation "org.apache.xmlgraphics:fop:$fop"

        implementation "edu.stanford.nlp:stanford-corenlp:$corenlp"
        implementation "edu.stanford.nlp:stanford-corenlp:$corenlp:models"

        implementation "com.google.cloud:google-cloud-texttospeech:$googleCloudTextToSpeech"
        implementation "com.google.code.gson:gson:$gson"
        implementation "com.google.maps:google-maps-services:$googleMapsServices"
        implementation "com.googlecode.libphonenumber:libphonenumber:$libphonenumber"
        implementation "com.google.cloud:google-cloud-translate:$googleCloudTranslate"
        implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20200713.1"
        implementation("com.google.firebase:firebase-admin:$firebase") {
            exclude group: 'com.google.guava'
        }

        implementation "com.fasterxml:classmate:$classmate"
        implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson"
        implementation "com.fasterxml.jackson.core:jackson-core:$jackson"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jackson"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlin"

        implementation "org.json:json:$json"
        implementation "com.maxmind.geoip2:geoip2:$geoip2"

        implementation "commons-fileupload:commons-fileupload:$commonsfileupload"
        implementation "commons-io:commons-io:$commonsio"
        implementation "commons-validator:commons-validator:$commonsvalidator"
        implementation "commons-codec:commons-codec:1.15"
        implementation "commons-logging:commons-logging:1.2"

        implementation "com.sun.mail:jakarta.mail:$jakartaMail"
        implementation "javax.validation:validation-api:$javaxValidation"
        implementation "javax.inject:javax.inject:1"

        implementation "org.apache.commons:commons-lang3:$commonslang3"
        implementation "org.apache.commons:commons-text:$commonsText"
        implementation "org.apache.poi:poi:$poi"
        implementation "org.apache.tika:tika-parsers:$tika"
        implementation "org.apache.tika:tika-core:$tika"
        implementation "org.apache.commons:commons-collections4:$commonsCollections"
        implementation "org.apache.commons:commons-vfs2:$vfs2"
        implementation "org.apache.commons:commons-csv:$csv"
        implementation "org.apache.activemq:activemq-client:$activemq"
        implementation "org.apache.pdfbox:pdfbox:$pdfbox"
        implementation "com.github.dhorions:boxable:$boxable"

        implementation "ch.qos.logback:logback-core:$logback"
        implementation "ch.qos.logback:logback-classic:$logback"
        implementation "net.logstash.logback:logstash-logback-encoder:$logstashlogbackencoder"
        implementation "net.bull.javamelody:javamelody-core:$javamelody"
        /** Because using org.junit.Assert in code. */
        implementation "org.junit.jupiter:junit-jupiter-engine:$junit5"
        implementation "org.hamcrest:hamcrest-all:1.3"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5"
        testImplementation "org.mockito:mockito-core:$mockito"
        testImplementation "org.mockito:mockito-inline:$mockito"
        testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$flapdoodle"
        testImplementation "org.springframework:spring-test:$springVersion"
        testImplementation "org.awaitility:awaitility:$awaitility"
        testImplementation "org.elasticsearch.test:framework:$elastic"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatform"
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests completed, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }

        jacoco {
            destinationFile = file("${buildDir}/jacoco/test.exec")
        }
    }

//    checkstyle {
//        toolVersion = '8.36.2'
//        ignoreFailures = true
//        configDir = file("$project.rootDir/config/checkstyle")
//    }

    pmd {
        ignoreFailures = true
        toolVersion = '6.28.0'
        incrementalAnalysis = true

        ruleSets = [
                "java-basic",
                "java-braces",
                "java-naming",
                "java-android",
                "java-clone",
                "java-codesize",
                "java-controversial",
                "java-design",
                "java-finalizers",
                "java-imports",
                "java-j2ee",
                "java-javabeans",
                "java-junit",
                "java-migrating",
                "java-optimizations",
                "java-strictexception",
                "java-strings",
                "java-sunsecure",
                "java-typeresolution",
                "java-unusedcode"
        ]
    }

    //https://medium.com/@mladen.bolic/setting-up-static-code-analysis-for-java-3428dc79f7f9
    //https://github.com/google/error-prone
    //https://github.com/tbroyer/gradle-errorprone-plugin
    //https://ci.jenkins.io/job/Plugins/job/warnings-ng-plugin/job/master/lastStableBuild/java/
    //https://ci.jenkins.io/job/Plugins/job/warnings-ng-plugin/job/master/lastStableBuild/
    cpd {
        language = 'java'
        toolVersion = '6.24.0'
        minimumTokenCount = 100 // approximately 5-10 lines
    }

    cpdCheck {
        reports {
            text.enabled = false
            xml.enabled = true
        }
        ignoreAnnotations = true
        ignoreFailures = true
        source = sourceSets.main.allJava
    }

    jacoco {
        toolVersion = "0.8.6"
    }
    
    spotbugs {
        toolVersion = '4.1.4'
        ignoreFailures = true
        effort = 'max'
        showProgress = true
    }

    dependencyCheck {
        failOnError = false
        format = 'ALL'
        failBuildOnCVSS = 20
        suppressionFile = file("$rootProject.projectDir/config/dependencyCheck/dependency-check-known-issues.xml")
    }

    spotbugsMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

// Sonar run rests here. I could not run this using gradle but standalone is working well
//    apply plugin: 'sonar'
//    apply plugin: 'sonar-runner'
//    sonarRunner {
//        sonarProperties {
//            property 'sonar.projectKey', 'receipt-mobile-application'
//            property 'sonar.projectName', 'Receipt Mobile Application'
//            property 'sonar.projectDescription', 'Receipt Mobile Application'
//            property 'sonar.projectVersion', '1.0'
//
//            property 'sonar.language', 'java'
//            property 'sonar.verbose', 'true'
//            property 'sonar.sourceEncoding', 'UTF-8'
//
//            // sonar server and database
//            property "sonar.host.url", "sonar.receiptofi.com"
//            property "sonar.jdbc.url", 'jdbc:mysql://192.168.1.68:3306/sonar?useUnicode=true&amp;characterEncoding=utf8'
//            //property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
//            property "sonar.jdbc.username", 'receiptofi'
//            property "sonar.jdbc.password", 'r3f02\\!M'
//
//            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
//            property 'sonar.junit.reportsPath', "${buildDir}/test-results"
//        }
//    }
}

project(':common') {
    jar.archiveBaseName = archiveName + '-common'
}

project(':domain') {
    jar.archiveBaseName = archiveName + '-domain'

    dependencies {
        implementation project(':common')
    }
}

project(':health') {
    jar.archiveBaseName = archiveName + '-health'

    dependencies {
        implementation project(':common'),
                project(':domain')
    }
}

project(':security') {
    apply plugin: 'war'
    jar.archiveBaseName = archiveName + '-security'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation project(':common'),
                project(':domain')

        providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    }
}

project(':service') {
    jar.archiveBaseName = archiveName + '-service'

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':health')
    }
}

project(':search') {
    jar.archiveBaseName = archiveName + '-search'

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':health')
    }
}

project(':social') {
    jar.archiveBaseName = archiveName + '-social'

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':service')
    }
}

project(':medical') {
    jar.archiveBaseName = archiveName + '-medical'

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':health'),
                project(':service')
    }
}

project(':inventory') {
    jar.archiveBaseName = archiveName + '-inventory'

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':health'),
                project(':service')
    }
}

project(':view') {
    apply plugin: 'war'
    jar.archiveBaseName = archiveName + '-view'
    war.archiveBaseName = archiveName + '-view'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':health'),
                project(':security'),
                project(':inventory'),
                project(':medical'),
                project(':social'),
                project(':service'),
                project(':search'),
                project(':loader')

        providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    }
}

project(':loader') {
    apply plugin: 'war'
    jar.archiveBaseName = archiveName + '-loader'

    dependencies {
        implementation project(':common'),
                project(':domain'),
                project(':health'),
                project(':service'),
                project(':medical')

        providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    }
}

task copyJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'health/build/libs'
    from 'security/build/libs'
    from 'inventory/build/libs'
    from 'medical/build/libs'
    from 'service/build/libs'
    from 'search/build/libs'
    from 'social/build/libs'
    from 'view/build/libs'
    into warLibDir
    include '**/*.jar'
}

task unzip(type: Copy, dependsOn: [':view:war']) {
    def zipFile = file("view/build/libs/$archiveName" + '-view-' + version + '.war')

    from zipTree(zipFile)
    into unzipDir
}

task setUpProfileForJunit() {
    doLast {
        delete buildDir
        activeProfilewarClassesDir.mkdirs()
        activeProfilewarConfDir.mkdirs()
        activeProfilewarFreemarkerDir.mkdirs()
        activeProfilewarXslfoDir.mkdirs()
        activeProfilewarGeoDBDir.mkdirs()

        copy {
            from file("view/environment/$env/$env" + ".properties")
            into activeProfilewarConfDir
        }

        copy {
            from file("view/environment/$env/ogm" + ".properties")
            into activeProfilewarConfDir
        }

        copy {
            from 'view/resources/conf/application-messages.properties'
            from 'view/resources/conf/communication.properties'
            from 'view/resources/conf/config.properties'
            from 'view/resources/conf/redis.properties'
            from 'view/resources/conf/300x300_overlay_code_qr.png'

            if (env == 'prod') {
                if (passFileProd.exists()) {
                    from passwordProdFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileProd.canonicalPath")
                }

                if (firebaseFileProd.exists()) {
                    from firebaseAdminProdFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (passFileTest.exists()) {
                    from passwordTestFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileTest.canonicalPath")
                }

                if (firebaseFileTest.exists()) {
                    from firebaseAdminTestFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local pass file $passFileLocal.canonicalPath"
                if (passFileLocal.exists()) {
                    from 'view/resources/conf/pass.properties'
                } else {
                    throw new Exception("Required pass file does not exists: $passFileLocal.canonicalPath")
                }

                println "Development environment, getting local firebase file $firebaseFileLocal.canonicalPath"
                if (firebaseFileLocal.exists()) {
                    from 'view/resources/conf/noq-app-inc-firebase-adminsdk.json'
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileLocal.canonicalPath")
                }
            }

            into activeProfilewarConfDir
        }

        copy {
            if (env == 'prod') {
                if (geoDBProd.exists()) {
                    from geoDBProdFileLocation
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (geoDBTest.exists()) {
                    from geoDBTestFileLocation
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBTestFileLocation.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local GeoLite file $geoDBLocal.canonicalPath"
                if (geoDBLocal.exists()) {
                    from 'view/resources/geo_db/GeoLite2-City.mmdb'
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBLocal.canonicalPath")
                }
            }

            into activeProfilewarGeoDBDir
        }

        copy {
            from "view/environment/$env/logback.xml"
            from 'view/resources/conf/messages.properties'
            into activeProfilewarClassesDir
        }

        copy {
            from "view/environment/$env/noqueue-servlet.xml"
            into activeProfilewarWebInfDir
        }

        copy {
            from "view/environment/$env/mongo-config.xml"
            into activeProfilewarWebInfDir
        }

        copy {
            from "view/web$freemarker"
            into activeProfilewarFreemarkerDir
        }

        copy {
            from "view/resources/xslfo"
            into activeProfilewarXslfoDir
        }
    }
}

task createBuildInfoFile {
    doLast {
        buildDir.mkdirs()
        def buildInfoFile = new File("$buildDir/build-info.properties")
        Properties props = new Properties()
        props.setProperty('owner', 'NoQueue')
        props.setProperty('copyright', 'All rights reserved')
        props.setProperty('build.version', project.version.toString())
        props.setProperty('build.env', "$env")
        props.setProperty('thisis', "non-loader")

        props.store(buildInfoFile.newWriter(), null)
    }
}

task createLoaderBuildInfoFile {
    doLast {
        buildDir.mkdirs()
        def buildInfoFile = new File("$buildDir/build-info.properties")
        Properties props = new Properties()
        props.setProperty('owner', 'NoQueue')
        props.setProperty('copyright', 'All rights reserved')
        props.setProperty('build.version', project.version.toString())
        props.setProperty('build.env', "$env")
        props.setProperty('thisis', "loader")

        props.store(buildInfoFile.newWriter(), null)

        copy {
            from "${buildDir}/build-info.properties"
            into warClassesDir
        }
    }
}

task prepWar(dependsOn: [
        createBuildInfoFile,
        unzip,
        copyJars
]) {
    doLast {
        warClassesDir.mkdirs()
        warBannerImageDir.mkdirs()
        warConfDir.mkdirs()
        warDkimDir.mkdirs()
        warNLPDir.mkdirs()
        warMappingDir.mkdirs()
        warGeoDBDir.mkdirs()
        warXslfoDir.mkdirs()

        copy {
            from 'view/web'
            into warDir
        }

        copy {
            from file("view/environment/$env/$env" + ".properties")
            into warConfDir
        }

        copy {
            from file("view/environment/$env/ogm" + ".properties")
            into warConfDir
        }

        copy {
            from 'view/resources/xslfo'
            into warXslfoDir
        }

        copy {
            from 'view/resources/conf/application-messages.properties'
            from 'view/resources/conf/communication.properties'
            from 'view/resources/conf/config.properties'
            from 'view/resources/conf/redis.properties'
            from 'view/resources/conf/300x300_overlay_code_qr.png'

            if (env == 'prod') {
                if (passFileProd.exists()) {
                    from passwordProdFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileProd.canonicalPath")
                }

                if (firebaseFileProd.exists()) {
                    from firebaseAdminProdFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (passFileTest.exists()) {
                    from passwordTestFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileTest.canonicalPath")
                }

                if (firebaseFileTest.exists()) {
                    from firebaseAdminTestFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local pass file $passFileLocal.canonicalPath"
                if (passFileLocal.exists()) {
                    from 'view/resources/conf/pass.properties'
                } else {
                    throw new Exception("Required pass file does not exists: $passFileLocal.canonicalPath")
                }

                println "Development environment, getting local firebase file $firebaseFileLocal.canonicalPath"
                if (firebaseFileLocal.exists()) {
                    from 'view/resources/conf/noqueue-sandbox-firebase-adminsdk.json'
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileLocal.canonicalPath")
                }
            }

            into warConfDir
        }

        copy {
            if (env == 'prod') {
                if (dkimCertProd.exists()) {
                    from dkimCertificateProdFileLocation
                } else {
                    throw new Exception("Required dkim file does not exists: $dkimCertProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (dkimCertTest.exists()) {
                    from dkimCertificateTestFileLocation
                } else {
                    throw new Exception("Required dkim file does not exists: $dkimCertTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local dkim file $dkimCertLocal.canonicalPath"
                if (dkimCertLocal.exists()) {
                    from dkimCertLocal
                } else {
                    throw new Exception("Required dkim file does not exists: $dkimCertLocal.canonicalPath")
                }
            }

            into warDkimDir
        }

        copy {
            if (env == 'prod') {
                if (geoDBProd.exists()) {
                    from geoDBProdFileLocation
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (geoDBTest.exists()) {
                    from geoDBTestFileLocation
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBTestFileLocation.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local GeoLite file $geoDBLocal.canonicalPath"
                if (geoDBLocal.exists()) {
                    from 'view/resources/geo_db/GeoLite2-City.mmdb'
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            into warGeoDBDir
        }

        copy {
            from("search/resources/elastic_mapping") {
                include "**/*.json"
            }
            into warMappingDir
        }

        copy {
            from("service/resources/banner_images") {
                include "**/*.*"
            }
            into warBannerImageDir;
        }

        copy {
            from("common/src/main/resources/nlp") {
                include "*/**"
                exclude "**/*.txt"
            }
            into warNLPDir
        }

        copy {
            from "view/environment/$env/logback.xml"
            from 'view/resources/conf/messages.properties'
            into warClassesDir
        }

        copy {
            from "view/environment/$env/noqueue-servlet.xml"
            into warWebInfDir
        }

        copy {
            from "view/environment/$env/mongo-config.xml"
            into warWebInfDir
        }

        copy {
            from unzipLibDir
            into warLibDir
        }

        copy {
            from "${buildDir}/build-info.properties"
            into warClassesDir
        }
    }
}

//import org.apache.tools.ant.filters.ReplaceTokens
task war(type: War, dependsOn: prepWar) {
    doFirst {
        exclude('**/noqapp-loader-*.jar')
//        filter(ReplaceTokens, tokens: ['style': 'style-min.css'])
//        filter(ReplaceTokens, tokens: ['stylelogin': 'stylelogin-min.css'])
    }

    archiveBaseName = "ROOT-$env" + "." + project.version.toString()
    from warDir
    version ""
    destinationDirectory = file("$buildDir/war/$env")
}

task loaderWar(type: War, dependsOn: [createLoaderBuildInfoFile, prepWar]) {
    doFirst {
//        filter(ReplaceTokens, tokens: ['style': 'style-min.css'])
//        filter(ReplaceTokens, tokens: ['stylelogin': 'stylelogin-min.css'])
    }

    archiveBaseName = "ROOT-loader-$env" + "." + project.version.toString()
    from warDir
    version ""
    destinationDirectory = file("$buildDir/war/$env-loader")
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    doLast {
        println "Test reports for all test complete $env"
    }
}

publishing {
    publications {
        common(MavenPublication) {
            artifactId 'common'
            artifact "common/build/libs/$archiveName" + '-common-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        domain(MavenPublication) {
            artifactId 'domain'
            artifact "domain/build/libs/$archiveName" + '-domain-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        health(MavenPublication) {
            artifactId 'health'
            artifact "health/build/libs/$archiveName" + '-health-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        medical(MavenPublication) {
            artifactId 'medical'
            artifact "medical/build/libs/$archiveName" + '-medical-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        inventory(MavenPublication) {
            artifactId 'inventory'
            artifact "inventory/build/libs/$archiveName" + '-inventory-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        service(MavenPublication) {
            artifactId 'service'
            artifact "service/build/libs/$archiveName" + '-service-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        search(MavenPublication) {
            artifactId 'search'
            artifact "search/build/libs/$archiveName" + '-search-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }

        social(MavenPublication) {
            artifactId 'social'
            artifact "social/build/libs/$archiveName" + '-social-' + version + '.jar'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'NoQueue Web')
                root.appendNode('description', 'NoQueue applications jar')
                root.appendNode('inceptionYear', '2016')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Private. Copyright 2016-2021. All rights reserved.')
                license.appendNode('url', 'https://www.noqapp.com/licenses/private.txt')
                license.appendNode('distribution', 'NoQueue private repository')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'NoQueue')
                developer.appendNode('name', 'NoQueue')
                developer.appendNode('email', 'contact@noqapp.com')
            }
        }
    }

    repositories {
        maven {
            url 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
        }
    }
}

//Line below is not required because defaultTasks order is followed
//testReport.mustRunAfter war
//publishToMavenLocal for local
defaultTasks 'clean', 'setUpProfileForJunit', 'build', 'jar', 'war', 'loaderWar', 'test', 'testReport', 'jacocoTestReport', 'publish'
